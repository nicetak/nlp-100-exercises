[["index.html", "A Solution of NLP 100 Exercise Preface", " A Solution of NLP 100 Exercise Kazuharu Yanagimoto March 08, 2022 Preface This is my personal R solutions for NLP 100 Exercise 2020. For the test of bookdown, I opened this website. "],["chapter-1-warm-up.html", "Chapter 1: Warm-up 00. Reversed string 01. “schooled” 02. “shoe” + “cold” = “schooled” 03. Pi 04. Atomic symbols 05. n-gram 06. Set 07. Template-based sentence generation 08. Cipher text 09. Typoglycemia", " Chapter 1: Warm-up 00. Reversed string stringi::stri_reverse(&quot;stressed&quot;) ## [1] &quot;desserts&quot; 01. “schooled” str_split(&quot;schhooled&quot;, &quot;&quot;) %&gt;% unlist() %&gt;% .[c(TRUE, FALSE)] ## [1] &quot;s&quot; &quot;h&quot; &quot;o&quot; &quot;l&quot; &quot;d&quot; 02. “shoe” + “cold” = “schooled” c(unlist(str_split(&quot;shoe&quot;, &quot;&quot;)), unlist(str_split(&quot;cold&quot;, &quot;&quot;))) %&gt;% .[c(1, 5, 2, 6, 3, 7, 4, 8)] %&gt;% paste0(collapse = &quot;&quot;) ## [1] &quot;schooled&quot; 03. Pi s &lt;- &quot;Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics&quot; s %&gt;% str_replace_all(&quot;,|\\\\.&quot;, &quot;&quot;) %&gt;% str_split(&quot; &quot;) %&gt;% unlist() %&gt;% str_length() ## [1] 3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 04. Atomic symbols s &lt;- &quot;Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can&quot; indices &lt;- c(1, 5, 6, 7, 8, 9, 15, 16, 19) ss &lt;- s %&gt;% str_split(&quot; &quot;) %&gt;% unlist() map(1:length(ss), function(i){ setNames(i, str_sub(ss[i], 1, if_else(i %in% indices, 1, 2))) }) %&gt;% unlist() ## H He Li Be B C N O F Ne Na Mi Al Si P S Cl Ar K Ca ## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 05. n-gram n_gram_word &lt;- function(s, n = 2){ str_split(s, &quot; &quot;) %&gt;% unlist() %&gt;% embed(n) %&gt;% .[, n:1] %&gt;% asplit(1) } n_gram_letter &lt;- function(s, n = 2){ str_split(s, &quot;&quot;) %&gt;% unlist() %&gt;% embed(n) %&gt;% .[, n:1] %&gt;% apply(1, paste, collapse = &quot;&quot;) } s &lt;- &quot;I am an NLPer&quot; n_gram_word(s) ## [[1]] ## [1] &quot;I&quot; &quot;am&quot; ## ## [[2]] ## [1] &quot;am&quot; &quot;an&quot; ## ## [[3]] ## [1] &quot;an&quot; &quot;NLPer&quot; n_gram_letter(s) ## [1] &quot;I &quot; &quot; a&quot; &quot;am&quot; &quot;m &quot; &quot; a&quot; &quot;an&quot; &quot;n &quot; &quot; N&quot; &quot;NL&quot; &quot;LP&quot; &quot;Pe&quot; &quot;er&quot; 06. Set x &lt;- n_gram_letter(&quot;paraparaparadise&quot;) y &lt;- n_gram_letter(&quot;paragraph&quot;) union(x, y) ## [1] &quot;pa&quot; &quot;ar&quot; &quot;ra&quot; &quot;ap&quot; &quot;ad&quot; &quot;di&quot; &quot;is&quot; &quot;se&quot; &quot;ag&quot; &quot;gr&quot; &quot;ph&quot; intersect(x, y) ## [1] &quot;pa&quot; &quot;ar&quot; &quot;ra&quot; &quot;ap&quot; setdiff(x, y) ## [1] &quot;ad&quot; &quot;di&quot; &quot;is&quot; &quot;se&quot; &quot;se&quot; %in% x ## [1] TRUE &quot;se&quot; %in% y ## [1] FALSE 07. Template-based sentence generation template_sentence &lt;- function(x, y, z){ sprintf(&quot;%s is %s at %s&quot;, y, x, z) } template_sentence(12, &quot;temperature&quot;, 22.4) ## [1] &quot;temperature is 12 at 22.4&quot; 08. Cipher text asc &lt;- function(x) { strtoi(charToRaw(x), 16L) } chr &lt;- function(n) { rawToChar(as.raw(n)) } cipher &lt;- function(s){ s %&gt;% str_split(&quot;&quot;) %&gt;% unlist() %&gt;% map(function(l){ num_l &lt;- asc(l) if_else(num_l %in% asc(&quot;a&quot;):asc(&quot;z&quot;), chr(219 - num_l), l) }) %&gt;% unlist() %&gt;% paste(collapse = &quot;&quot;) } s &lt;- &quot;The quick brown fox jumps over the lazy dog.&quot; paste0(&quot;Plain text: &quot;, s) ## [1] &quot;Plain text: The quick brown fox jumps over the lazy dog.&quot; paste0(&quot;Cipher text: &quot;, cipher(s)) ## [1] &quot;Cipher text: Tsv jfrxp yildm ulc qfnkh levi gsv ozab wlt.&quot; paste0(&quot;Decrypted text: &quot;, cipher(cipher(s))) ## [1] &quot;Decrypted text: The quick brown fox jumps over the lazy dog.&quot; 09. Typoglycemia word_mixed &lt;- function(w){ len_w &lt;- str_length(w) if(len_w &gt; 4){ ls &lt;- w %&gt;% str_split(&quot;&quot;) %&gt;% unlist() c(ls[1], sample(ls[2:(len_w-1)], size = len_w-2, replace = FALSE), ls[len_w]) %&gt;% paste(collapse = &quot;&quot;) } else { return(w) } } typoglycemia &lt;- function(s){ s %&gt;% str_split(&quot; &quot;) %&gt;% unlist() %&gt;% lapply(word_mixed) %&gt;% unlist() %&gt;% paste(collapse = &quot; &quot;) } s &lt;- &quot;I couldn&#39;t believe that I could actually understand what I was reading : the phenomenal power of the human mind .&quot; typoglycemia(s) ## [1] &quot;I cduno&#39;lt bleevie that I colud alltuacy untdnesard what I was raidneg : the panmnheeol power of the hmuan mind .&quot; "],["chapter-2-unix-commands.html", "Chapter 2: UNIX Commands 10. Line count 11. Replace tabs into spaces 12. col1.txt from the first column, col2.txt from the second column 13. Merging col1.txt and col2.txt 14. First N lines 15. Last N lines 16. Split a file into N pieces 17. Distinct strings in the first column 18. Sort lines in descending order of the third column 19. Frequency of a string in the first column in descending order", " Chapter 2: UNIX Commands 10. Line count length(lines) ## [1] 2780 wc ../data/popular-names.txt ## 2780 11120 55026 ../data/popular-names.txt 11. Replace tabs into spaces lines %&gt;% str_replace_all(&quot;\\t&quot;, &quot; &quot;) %&gt;% head(3) ## [1] &quot;Mary F 7065 1880&quot; &quot;Anna F 2604 1880&quot; &quot;Emma F 2003 1880&quot; cat ../data/popular-names.txt | tr &quot;\\t&quot; &quot; &quot; | head -3 ## Mary F 7065 1880 ## Anna F 2604 1880 ## Emma F 2003 1880 12. col1.txt from the first column, col2.txt from the second column data$name %&gt;% paste(collapse = &quot;\\n&quot;) %&gt;% write(here(&quot;result/col1.txt&quot;)) data$gender %&gt;% paste(collapse = &quot;\\n&quot;) %&gt;% write(here(&quot;result/col2.txt&quot;)) cut -f 1 ../data/popular-names.txt &gt; ../result/col1_shell.txt cut -f 2 ../data/popular-names.txt &gt; ../result/col2_shell.txt diff ../result/col1.txt ../result/col1_shell.txt diff ../result/col2.txt ../result/col2_shell.txt # NO differences detected 13. Merging col1.txt and col2.txt col1 &lt;- readLines(here(&quot;result/col1.txt&quot;)) col2 &lt;- readLines(here(&quot;result/col2.txt&quot;)) paste(col1, col2, sep = &quot;\\t&quot;) %&gt;% head(3) ## [1] &quot;Mary\\tF&quot; &quot;Anna\\tF&quot; &quot;Emma\\tF&quot; paste -d &quot;\\t&quot; ../result/col1.txt ../result/col2.txt | head -3 ## Mary F ## Anna F ## Emma F 14. First N lines head(lines, 3) ## [1] &quot;Mary\\tF\\t7065\\t1880&quot; &quot;Anna\\tF\\t2604\\t1880&quot; &quot;Emma\\tF\\t2003\\t1880&quot; head -3 ../data/popular-names.txt ## Mary F 7065 1880 ## Anna F 2604 1880 ## Emma F 2003 1880 15. Last N lines tail(lines, 3) ## [1] &quot;Lucas\\tM\\t12585\\t2018&quot; &quot;Mason\\tM\\t12435\\t2018&quot; &quot;Logan\\tM\\t12352\\t2018&quot; tail -3 ../data/popular-names.txt ## Lucas M 12585 2018 ## Mason M 12435 2018 ## Logan M 12352 2018 16. Split a file into N pieces split_lines &lt;- function(lines, n){ split(lines, sort(rep_len(1:n, length(lines)))) %&gt;% setNames(NULL) } split_lines(lines, 3) %&gt;% lapply(head, 3) ## [[1]] ## [1] &quot;Mary\\tF\\t7065\\t1880&quot; &quot;Anna\\tF\\t2604\\t1880&quot; &quot;Emma\\tF\\t2003\\t1880&quot; ## ## [[2]] ## [1] &quot;Virginia\\tF\\t16162\\t1926&quot; &quot;Mildred\\tF\\t13551\\t1926&quot; ## [3] &quot;Frances\\tF\\t13355\\t1926&quot; ## ## [[3]] ## [1] &quot;John\\tM\\t43181\\t1972&quot; &quot;Robert\\tM\\t43037\\t1972&quot; &quot;Jason\\tM\\t37446\\t1972&quot; split -l 1000 ../data/popular-names.txt ../result/popular-names- 17. Distinct strings in the first column data$name %&gt;% levels() %&gt;% sort() %&gt;% head(5) ## [1] &quot;Abigail&quot; &quot;Aiden&quot; &quot;Alexander&quot; &quot;Alexis&quot; &quot;Alice&quot; cut -f 1 ../data/popular-names.txt | sort -s | uniq | head -5 ## Abigail ## Aiden ## Alexander ## Alexis ## Alice 18. Sort lines in descending order of the third column data %&gt;% arrange(desc(num)) %&gt;% head(5) ## # A tibble: 5 × 4 ## name gender num year ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Linda F 99689 1947 ## 2 Linda F 96211 1948 ## 3 James M 94757 1947 ## 4 Michael M 92704 1957 ## 5 Robert M 91640 1947 sort -n -r -k 3 ../data/popular-names.txt | head -5 ## Linda F 99689 1947 ## Linda F 96211 1948 ## James M 94757 1947 ## Michael M 92704 1957 ## Robert M 91640 1947 19. Frequency of a string in the first column in descending order data %&gt;% group_by(name) %&gt;% count() %&gt;% arrange(desc(n)) %&gt;% head(5) ## # A tibble: 5 × 2 ## # Groups: name [5] ## name n ## &lt;fct&gt; &lt;int&gt; ## 1 James 118 ## 2 William 111 ## 3 John 108 ## 4 Robert 108 ## 5 Mary 92 cut -f 1 ../data/popular-names.txt | sort | uniq -c | sort -n -r -k 1 | head -5 ## 118 James ## 111 William ## 108 Robert ## 108 John ## 92 Mary "],["chapter-3-regular-expression.html", "Chapter 3: Regular Expression 20. Rea JSON documents 21. Lines with category names 22. Category names 23. Section structure 24. Media references 25. Infobox 26. Remove emphasis markups 27. Remove internal links 28. Remove MediaWiki markups 29. Country flag", " Chapter 3: Regular Expression 20. Rea JSON documents Read the JSON documents and output the body of the article about the United Kingdom. Reuse the output in problems 21-29. data &lt;- readLines(here(&quot;data/enwiki-country.json&quot;)) article_UK &lt;- grep(&quot;^\\\\{\\&quot;title\\&quot;: \\&quot;United Kingdom\\&quot;&quot;, data, value = T) lines_UK &lt;- fromJSON(article_UK)$text %&gt;% str_split(&quot;\\\\n&quot;) %&gt;% unlist() lines_UK[1:5] ## [1] &quot;{{About-distinguish2|the country|[[Great Britain]], its largest island whose name is also loosely applied to the whole country}}&quot; ## [2] &quot;{{Redirect|UK|other uses of \\&quot;UK\\&quot;|UK (disambiguation)|other uses of \\&quot;United Kingdom\\&quot;|United Kingdom (disambiguation)}}&quot; ## [3] &quot;{{pp-semi-indef}}&quot; ## [4] &quot;{{pp-move-indef}}&quot; ## [5] &quot;{{short description|Country in Western Europe}}&quot; 21. Lines with category names Extract lines that define the categories of the article. lines_cat &lt;- grep(&quot;\\\\[\\\\[Category:.*\\\\]\\\\]&quot;, lines_UK, value = T) lines_cat %&gt;% head() ## [1] &quot;[[Category:United Kingdom| ]]&quot; ## [2] &quot;[[Category:British Islands]]&quot; ## [3] &quot;[[Category:Countries in Europe]]&quot; ## [4] &quot;[[Category:English-speaking countries and territories]]&quot; ## [5] &quot;[[Category:G7 nations]]&quot; ## [6] &quot;[[Category:Group of Eight nations]]&quot; 22. Category names Extract the category names of the article. lines_cat %&gt;% lapply(function(x) str_replace_all(x, &quot;^\\\\[\\\\[Category:|\\\\| |\\\\]\\\\]$&quot;, &quot;&quot;)) %&gt;% unlist() %&gt;% head() ## [1] &quot;United Kingdom&quot; ## [2] &quot;British Islands&quot; ## [3] &quot;Countries in Europe&quot; ## [4] &quot;English-speaking countries and territories&quot; ## [5] &quot;G7 nations&quot; ## [6] &quot;Group of Eight nations&quot; 23. Section structure Extract section names in the article with their levels. For example, the level of the section is 1 for the MediaWiki markup “== Section name ==”. sections &lt;- lines_UK %&gt;% str_extract_all(&quot;==.*==&quot;) %&gt;% unlist() for(i in 1:6){ s &lt;- sections[i] level &lt;- str_count(s, &quot;=&quot;) / 2 - 1 section &lt;- str_replace_all(s, &quot;\\\\s*={2,4}\\\\s*&quot;, &quot;&quot;) print(paste0(level, &quot; &quot;, section)) } ## [1] &quot;1 Etymology and terminology&quot; ## [1] &quot;1 History&quot; ## [1] &quot;2 Background&quot; ## [1] &quot;2 Treaty of Union&quot; ## [1] &quot;2 From the union with Ireland to the end of the First World War&quot; ## [1] &quot;2 Between the World Wars&quot; 24. Media references Extract references to media files linked from the article. lines_UK %&gt;% str_extract_all(&quot;\\\\[\\\\[File:.*?(\\\\||\\\\]\\\\])&quot;) %&gt;% unlist() %&gt;% str_replace_all(&quot;^\\\\[\\\\[File:|\\\\|$|\\\\]\\\\]$&quot;, &quot;&quot;) %&gt;% head() ## [1] &quot;Royal Coat of Arms of the United Kingdom.svg&quot; ## [2] &quot;Royal Coat of Arms of the United Kingdom (Scotland).svg&quot; ## [3] &quot;United States Navy Band - God Save the Queen.ogg&quot; ## [4] &quot;Europe-UK (orthographic projection).svg&quot; ## [5] &quot;Europe-UK.svg&quot; ## [6] &quot;United Kingdom (+overseas territories and crown dependencies) in the World (+Antarctica claims).svg&quot; 25. Infobox Extract field names and their values in the Infobox “country”, and store them in a dictionary object. tmp &lt;- article_UK %&gt;% str_extract_all(&quot;\\\\{\\\\{Infobox country.*?(\\\\{\\\\{.*?\\\\}\\\\}.*?)*?\\\\}\\\\}&quot;) %&gt;% unlist() %&gt;% str_replace_all(&quot;^\\\\{\\\\{Infobox country\\\\\\\\n\\\\| |\\\\}\\\\}&quot;, &quot;&quot;) %&gt;% unlist() %&gt;% str_split(&quot;\\\\\\\\n\\\\| &quot;) %&gt;% unlist() %&gt;% str_replace_all(&quot; += &quot;, &quot;===&quot;) %&gt;% unlist() infobox &lt;- tibble(key = character(), value = character()) for(s in tmp){ x &lt;- str_split(s, &quot;===&quot;) %&gt;% unlist() infobox &lt;- infobox %&gt;% bind_rows(tibble(key = x[1], value = x[2])) } infobox ## # A tibble: 8 × 2 ## key value ## &lt;chr&gt; &lt;chr&gt; ## 1 common_name &quot;United Kingdom&quot; ## 2 linking_name &quot;the United Kingdom&lt;!--Note: \\\\\\&quot;the\\\\\\&quot; required here… ## 3 conventional_long_name &quot;United Kingdom of Great Britain and Northern Ireland&quot; ## 4 image_flag &quot;Flag of the United Kingdom.svg&quot; ## 5 alt_flag &quot;A flag featuring both cross and saltire in red, white… ## 6 other_symbol &quot;[[File:Royal Coat of Arms of the United Kingdom.svg|x… ## 7 other_symbol_type &quot;[[Royal coat of arms of the United Kingdom|Royal coat… ## 8 national_anthem &quot;\\\\\\&quot;[[God Save the Queen]]\\\\\\&quot;{{#tag:ref |There is no… 26. Remove emphasis markups In addition to the process of the problem 25, remove emphasis MediaWiki markups from the values. infobox &lt;- infobox %&gt;% mutate(value = str_replace_all(value, &quot;&#39;&#39;|&#39;&#39;&#39;&quot;, &quot;&quot;)) infobox ## # A tibble: 8 × 2 ## key value ## &lt;chr&gt; &lt;chr&gt; ## 1 common_name &quot;United Kingdom&quot; ## 2 linking_name &quot;the United Kingdom&lt;!--Note: \\\\\\&quot;the\\\\\\&quot; required here… ## 3 conventional_long_name &quot;United Kingdom of Great Britain and Northern Ireland&quot; ## 4 image_flag &quot;Flag of the United Kingdom.svg&quot; ## 5 alt_flag &quot;A flag featuring both cross and saltire in red, white… ## 6 other_symbol &quot;[[File:Royal Coat of Arms of the United Kingdom.svg|x… ## 7 other_symbol_type &quot;[[Royal coat of arms of the United Kingdom|Royal coat… ## 8 national_anthem &quot;\\\\\\&quot;[[God Save the Queen]]\\\\\\&quot;{{#tag:ref |There is no… 27. Remove internal links In addition to the process of the problem 26, remove internal links from the values. 28. Remove MediaWiki markups In addition to the process of the problem 27, remove MediaWiki markups from the values as much as you can, and obtain the basic information of the country in plain text format. 29. Country flag Obtain the URL of the country flag by using the analysis result of Infobox. file &lt;- infobox$value[infobox$key == &quot;image_flag&quot;] url &lt;- &quot;https://en.wikipedia.org/w/api.php&quot; query &lt;- list( action = &quot;query&quot;, format = &quot;json&quot;, prop = &quot;imageinfo&quot;, titles = paste0(&quot;File:&quot;, file), iiprop = &quot;url&quot; ) res &lt;- GET(url=url, query=query) image_info &lt;- res %&gt;% content(&quot;text&quot;) %&gt;% fromJSON() url_image &lt;- image_info$query$pages[[1]]$imageinfo$url Obtained image "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
