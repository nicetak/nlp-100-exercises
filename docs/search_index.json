[["index.html", "A Solution of NLP 100 Exercise Preface", " A Solution of NLP 100 Exercise Kazuharu Yanagimoto March 06, 2022 Preface This is my personal R solutions for NLP 100 Exercise 2020. For the test of bookdown, I opened this website. "],["chapter-1-warm-up.html", "Chapter 1: Warm-up 00. Reversed string 01. “schooled” 02. “shoe” + “cold” = “schooled” 03. Pi 04. Atomic symbols 05. n-gram 06. Set 07. Template-based sentence generation 08. Cipher text 09. Typoglycemia", " Chapter 1: Warm-up 00. Reversed string stringi::stri_reverse(&quot;stressed&quot;) ## [1] &quot;desserts&quot; 01. “schooled” str_split(&quot;schhooled&quot;, &quot;&quot;) %&gt;% unlist() %&gt;% .[c(TRUE, FALSE)] ## [1] &quot;s&quot; &quot;h&quot; &quot;o&quot; &quot;l&quot; &quot;d&quot; 02. “shoe” + “cold” = “schooled” c(unlist(str_split(&quot;shoe&quot;, &quot;&quot;)), unlist(str_split(&quot;cold&quot;, &quot;&quot;))) %&gt;% .[c(1, 5, 2, 6, 3, 7, 4, 8)] %&gt;% paste0(collapse = &quot;&quot;) ## [1] &quot;schooled&quot; 03. Pi s &lt;- &quot;Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics&quot; s %&gt;% str_replace_all(&quot;,|\\\\.&quot;, &quot;&quot;) %&gt;% str_split(&quot; &quot;) %&gt;% unlist() %&gt;% str_length() ## [1] 3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 04. Atomic symbols s &lt;- &quot;Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can&quot; indices &lt;- c(1, 5, 6, 7, 8, 9, 15, 16, 19) ss &lt;- s %&gt;% str_split(&quot; &quot;) %&gt;% unlist() map(1:length(ss), function(i){ setNames(i, str_sub(ss[i], 1, if_else(i %in% indices, 1, 2))) }) %&gt;% unlist() ## H He Li Be B C N O F Ne Na Mi Al Si P S Cl Ar K Ca ## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 05. n-gram n_gram_word &lt;- function(s, n = 2){ str_split(s, &quot; &quot;) %&gt;% unlist() %&gt;% embed(n) %&gt;% .[, n:1] %&gt;% asplit(1) } n_gram_letter &lt;- function(s, n = 2){ str_split(s, &quot;&quot;) %&gt;% unlist() %&gt;% embed(n) %&gt;% .[, n:1] %&gt;% apply(1, paste, collapse = &quot;&quot;) } s &lt;- &quot;I am an NLPer&quot; n_gram_word(s) ## [[1]] ## [1] &quot;I&quot; &quot;am&quot; ## ## [[2]] ## [1] &quot;am&quot; &quot;an&quot; ## ## [[3]] ## [1] &quot;an&quot; &quot;NLPer&quot; n_gram_letter(s) ## [1] &quot;I &quot; &quot; a&quot; &quot;am&quot; &quot;m &quot; &quot; a&quot; &quot;an&quot; &quot;n &quot; &quot; N&quot; &quot;NL&quot; &quot;LP&quot; &quot;Pe&quot; &quot;er&quot; 06. Set x &lt;- n_gram_letter(&quot;paraparaparadise&quot;) y &lt;- n_gram_letter(&quot;paragraph&quot;) union(x, y) ## [1] &quot;pa&quot; &quot;ar&quot; &quot;ra&quot; &quot;ap&quot; &quot;ad&quot; &quot;di&quot; &quot;is&quot; &quot;se&quot; &quot;ag&quot; &quot;gr&quot; &quot;ph&quot; intersect(x, y) ## [1] &quot;pa&quot; &quot;ar&quot; &quot;ra&quot; &quot;ap&quot; setdiff(x, y) ## [1] &quot;ad&quot; &quot;di&quot; &quot;is&quot; &quot;se&quot; &quot;se&quot; %in% x ## [1] TRUE &quot;se&quot; %in% y ## [1] FALSE 07. Template-based sentence generation template_sentence &lt;- function(x, y, z){ sprintf(&quot;%s is %s at %s&quot;, y, x, z) } template_sentence(12, &quot;temperature&quot;, 22.4) ## [1] &quot;temperature is 12 at 22.4&quot; 08. Cipher text asc &lt;- function(x) { strtoi(charToRaw(x), 16L) } chr &lt;- function(n) { rawToChar(as.raw(n)) } cipher &lt;- function(s){ s %&gt;% str_split(&quot;&quot;) %&gt;% unlist() %&gt;% map(function(l){ num_l &lt;- asc(l) if_else(num_l %in% asc(&quot;a&quot;):asc(&quot;z&quot;), chr(219 - num_l), l) }) %&gt;% unlist() %&gt;% paste(collapse = &quot;&quot;) } s &lt;- &quot;The quick brown fox jumps over the lazy dog.&quot; paste0(&quot;Plain text: &quot;, s) ## [1] &quot;Plain text: The quick brown fox jumps over the lazy dog.&quot; paste0(&quot;Cipher text: &quot;, cipher(s)) ## [1] &quot;Cipher text: Tsv jfrxp yildm ulc qfnkh levi gsv ozab wlt.&quot; paste0(&quot;Decrypted text: &quot;, cipher(cipher(s))) ## [1] &quot;Decrypted text: The quick brown fox jumps over the lazy dog.&quot; 09. Typoglycemia word_mixed &lt;- function(w){ len_w &lt;- str_length(w) if(len_w &gt; 4){ ls &lt;- w %&gt;% str_split(&quot;&quot;) %&gt;% unlist() c(ls[1], sample(ls[2:(len_w-1)], size = len_w-2, replace = FALSE), ls[len_w]) %&gt;% paste(collapse = &quot;&quot;) } else { return(w) } } typoglycemia &lt;- function(s){ s %&gt;% str_split(&quot; &quot;) %&gt;% unlist() %&gt;% lapply(word_mixed) %&gt;% unlist() %&gt;% paste(collapse = &quot; &quot;) } s &lt;- &quot;I couldn&#39;t believe that I could actually understand what I was reading : the phenomenal power of the human mind .&quot; typoglycemia(s) ## [1] &quot;I c&#39;ldnuot belevie that I colud alctaluy unstndared what I was rnedaig : the pnmhoaenel power of the human mind .&quot; "],["chapter-2-unix-commands.html", "Chapter 2: UNIX Commands 10. Line count 11. Replace tabs into spaces 12. col1.txt from the first column, col2.txt from the second column 13. Merging col1.txt and col2.txt 14. First N lines 15. Last N lines 16. Split a file into N pieces 17. Distinct strings in the first column 18. Sort lines in descending order of the third column 19. Frequency of a string in the first column in descending order", " Chapter 2: UNIX Commands 10. Line count length(lines) ## [1] 2780 wc ../data/popular-names.txt ## 2780 11120 55026 ../data/popular-names.txt 11. Replace tabs into spaces lines %&gt;% str_replace_all(&quot;\\t&quot;, &quot; &quot;) %&gt;% head(3) ## [1] &quot;Mary F 7065 1880&quot; &quot;Anna F 2604 1880&quot; &quot;Emma F 2003 1880&quot; cat ../data/popular-names.txt | tr &quot;\\t&quot; &quot; &quot; | head -3 ## Mary F 7065 1880 ## Anna F 2604 1880 ## Emma F 2003 1880 12. col1.txt from the first column, col2.txt from the second column data$name %&gt;% paste(collapse = &quot;\\n&quot;) %&gt;% write(here(&quot;result/col1.txt&quot;)) data$gender %&gt;% paste(collapse = &quot;\\n&quot;) %&gt;% write(here(&quot;result/col2.txt&quot;)) cut -f 1 ../data/popular-names.txt &gt; ../result/col1_shell.txt cut -f 2 ../data/popular-names.txt &gt; ../result/col2_shell.txt diff ../result/col1.txt ../result/col1_shell.txt diff ../result/col2.txt ../result/col2_shell.txt # NO differences detected 13. Merging col1.txt and col2.txt col1 &lt;- readLines(here(&quot;result/col1.txt&quot;)) col2 &lt;- readLines(here(&quot;result/col2.txt&quot;)) paste(col1, col2, sep = &quot;\\t&quot;) %&gt;% head(3) ## [1] &quot;Mary\\tF&quot; &quot;Anna\\tF&quot; &quot;Emma\\tF&quot; paste -d &quot;\\t&quot; ../result/col1.txt ../result/col2.txt | head -3 ## Mary F ## Anna F ## Emma F 14. First N lines head(lines, 3) ## [1] &quot;Mary\\tF\\t7065\\t1880&quot; &quot;Anna\\tF\\t2604\\t1880&quot; &quot;Emma\\tF\\t2003\\t1880&quot; head -3 ../data/popular-names.txt ## Mary F 7065 1880 ## Anna F 2604 1880 ## Emma F 2003 1880 15. Last N lines tail(lines, 3) ## [1] &quot;Lucas\\tM\\t12585\\t2018&quot; &quot;Mason\\tM\\t12435\\t2018&quot; &quot;Logan\\tM\\t12352\\t2018&quot; tail -3 ../data/popular-names.txt ## Lucas M 12585 2018 ## Mason M 12435 2018 ## Logan M 12352 2018 16. Split a file into N pieces split_lines &lt;- function(lines, n){ split(lines, sort(rep_len(1:n, length(lines)))) %&gt;% setNames(NULL) } split_lines(lines, 3) %&gt;% lapply(head, 3) ## [[1]] ## [1] &quot;Mary\\tF\\t7065\\t1880&quot; &quot;Anna\\tF\\t2604\\t1880&quot; &quot;Emma\\tF\\t2003\\t1880&quot; ## ## [[2]] ## [1] &quot;Virginia\\tF\\t16162\\t1926&quot; &quot;Mildred\\tF\\t13551\\t1926&quot; ## [3] &quot;Frances\\tF\\t13355\\t1926&quot; ## ## [[3]] ## [1] &quot;John\\tM\\t43181\\t1972&quot; &quot;Robert\\tM\\t43037\\t1972&quot; &quot;Jason\\tM\\t37446\\t1972&quot; split -l 1000 ../data/popular-names.txt ../result/popular-names- 17. Distinct strings in the first column data$name %&gt;% levels() %&gt;% sort() %&gt;% head(5) ## [1] &quot;Abigail&quot; &quot;Aiden&quot; &quot;Alexander&quot; &quot;Alexis&quot; &quot;Alice&quot; cut -f 1 ../data/popular-names.txt | sort -s | uniq | head -5 ## Abigail ## Aiden ## Alexander ## Alexis ## Alice 18. Sort lines in descending order of the third column data %&gt;% arrange(desc(num)) %&gt;% head(5) ## # A tibble: 5 × 4 ## name gender num year ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Linda F 99689 1947 ## 2 Linda F 96211 1948 ## 3 James M 94757 1947 ## 4 Michael M 92704 1957 ## 5 Robert M 91640 1947 sort -n -r -k 3 ../data/popular-names.txt | head -5 ## Linda F 99689 1947 ## Linda F 96211 1948 ## James M 94757 1947 ## Michael M 92704 1957 ## Robert M 91640 1947 19. Frequency of a string in the first column in descending order data %&gt;% group_by(name) %&gt;% count() %&gt;% arrange(desc(n)) %&gt;% head(5) ## # A tibble: 5 × 2 ## # Groups: name [5] ## name n ## &lt;fct&gt; &lt;int&gt; ## 1 James 118 ## 2 William 111 ## 3 John 108 ## 4 Robert 108 ## 5 Mary 92 cut -f 1 ../data/popular-names.txt | sort | uniq -c | sort -n -r -k 1 | head -5 ## 118 James ## 111 William ## 108 Robert ## 108 John ## 92 Mary "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
