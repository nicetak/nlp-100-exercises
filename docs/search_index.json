[["chapter-4-pos-tagging.html", "Chapter 4: POS Tagging 30. Reading the result 31. Verbs 32. Base forms of verbs 33. A of B 34. A B 35. Frequency of words 36. Top-ten frequent words 37. Top-ten words co-occurring with ‘Alice’ 38. Histogram 39. Zipf’s law", " Chapter 4: POS Tagging 30. Reading the result Implement a program that reads the result of part-of-speech tagging. Here, represent a sentence as a list of mapping objects, each of which associates a surface form, lemma (base form), part-of-speech tag with the keys text, lemma, pos. Use this representation in the rest of the problems. lines &lt;- readLines(here(&quot;data/alice.txt.conll&quot;)) alice &lt;- tibble(id_sentence = numeric(), text = character(), lemma = character(), pos = character()) id_sentence &lt;- 1 for(line in lines){ if(line == &quot;&quot;){ id_sentence &lt;- id_sentence + 1 } else{ x &lt;- str_split(line, &quot;\\t&quot;)[[1]] alice &lt;- alice %&gt;% add_row(id_sentence = id_sentence, text = x[2], lemma = x[3], pos = x[4]) } } alice &lt;- alice %&gt;% rowid_to_column(&quot;id&quot;) alice %&gt;% head() ## # A tibble: 6 × 5 ## id id_sentence text lemma pos ## &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 1 ALICE ALICE NNP ## 2 2 1 &#39;S &#39;s POS ## 3 3 1 ADVENTURES ADVENTURES NNP ## 4 4 1 IN in IN ## 5 5 1 WONDERLAND WONDERLAND NNP ## 6 6 2 Lewis Lewis NNP 31. Verbs Extract surface forms of all verbs appearing in the text. alice %&gt;% filter(str_detect(pos, &quot;VB&quot;)) %&gt;% pull(text) %&gt;% head() ## [1] &quot;was&quot; &quot;beginning&quot; &quot;get&quot; &quot;sitting&quot; &quot;having&quot; &quot;do&quot; 32. Base forms of verbs Extract lemmas of all verbs appearing in the text. alice %&gt;% filter(str_detect(pos, &quot;VB&quot;)) %&gt;% pull(lemma) %&gt;% head() ## [1] &quot;be&quot; &quot;begin&quot; &quot;get&quot; &quot;sit&quot; &quot;have&quot; &quot;do&quot; 33. A of B Extract noun phrases in the form of “A of B”, where A and B are nouns. is_a_of_b &lt;- function(i){ alice$pos[i] == &quot;NN&quot; &amp; alice$text[i+1] == &quot;of&quot; &amp; alice$pos[i+2] %in% &quot;NN&quot; } a_of_b &lt;- c() for(i in 1:(nrow(alice)-2)){ if(is_a_of_b(i)){ a_of_b &lt;- c(a_of_b, sprintf(&quot;%s of %s&quot;, alice$text[i], alice$text[i+2])) } } a_of_b ## [1] &quot;plenty of time&quot; &quot;saucer of milk&quot; ## [3] &quot;sort of way&quot; &quot;flavour of cherry-tart&quot; ## [5] &quot;number of bathing&quot; &quot;knowledge of history&quot; ## [7] &quot;subject of conversation&quot; &quot;question of course&quot; ## [9] &quot;person of authority&quot; &quot;sort of circle&quot; ## [11] &quot;deal of thought&quot; &quot;sort of thing&quot; ## [13] &quot;sort of chance&quot; &quot;sort of life&quot; ## [15] &quot;kind of thing&quot; &quot;bit of stick&quot; ## [17] &quot;yelp of delight&quot; &quot;game of play&quot; ## [19] &quot;state of mind&quot; &quot;tone of delight&quot; ## [21] &quot;length of neck&quot; &quot;wink of sleep&quot; ## [23] &quot;kind of serpent&quot; &quot;sort of use&quot; ## [25] &quot;subject of conversation&quot; &quot;cauldron of soup&quot; ## [27] &quot;agony of terror&quot; &quot;sort of lullaby&quot; ## [29] &quot;way of nursing&quot; &quot;sort of knot&quot; ## [31] &quot;bit of mushroom&quot; &quot;PLENTY of room&quot; ## [33] &quot;cup of tea&quot; &quot;sort of meaning&quot; ## [35] &quot;piece of rudeness&quot; &quot;business of MINE&quot; ## [37] &quot;sentence of execution&quot; &quot;scream of laughter&quot; ## [39] &quot;voice of thunder&quot; &quot;way of escape&quot; ## [41] &quot;friend of mine&quot; &quot;sort of way&quot; ## [43] &quot;time of life&quot; &quot;kind of rule&quot; ## [45] &quot;sentence of execution&quot; &quot;ledge of rock&quot; ## [47] &quot;kind of authority&quot; &quot;scroll of parchment&quot; ## [49] &quot;court of justice&quot; &quot;globe of goldfish&quot; ## [51] &quot;sort of idea&quot; &quot;piece of evidence&quot; ## [53] &quot;atom of meaning&quot; &quot;atom of meaning&quot; ## [55] &quot;world of trouble&quot; &quot;half of fright&quot; ## [57] &quot;half of anger&quot; 34. A B Extract the longest noun phrase consisting of consecutive nouns. v &lt;- alice %&gt;% filter(pos == &quot;NN&quot;) %&gt;% pull(id) temp &lt;- cumsum(c(1, diff(v) - 1)) temp2 &lt;- rle(temp) ids &lt;- v[which(temp == with(temp2, values[which.max(lengths)]))] alice[alice$id %in% ids, ]$text ## [1] &quot;CHAPTER&quot; &quot;I.&quot; 35. Frequency of words Obtain the list of words and frequencies of their occurrences sorted by descending order of frequency. freq_words &lt;- alice %&gt;% count(lemma) %&gt;% arrange(desc(n)) freq_words %&gt;% head() ## # A tibble: 6 × 2 ## lemma n ## &lt;chr&gt; &lt;int&gt; ## 1 , 2418 ## 2 the 1639 ## 3 &#39; 1130 ## 4 ` 1081 ## 5 be 1076 ## 6 . 986 36. Top-ten frequent words Visualize the top-ten frequent words and their frequencies with a chart (e.g., bar chart). freq_words %&gt;% head(10) %&gt;% ggplot(aes(x = reorder(lemma, -n), y = n)) + geom_bar(stat = &quot;identity&quot;) + labs(x = &quot;&quot;, y = &quot;count&quot;) + theme_minimal() 37. Top-ten words co-occurring with ‘Alice’ Extract the list of words that co-occur with the word “Alice”. Visualize with a chart (e.g., bar chart) the top-ten words co-occurring with the word “Alice” and their frequencies. id_alice &lt;- alice %&gt;% filter(lemma == &quot;Alice&quot;) %&gt;% pull(id_sentence) %&gt;% unique() alice %&gt;% filter(id_sentence %in% id_alice, lemma != &quot;Alice&quot;) %&gt;% count(lemma) %&gt;% arrange(desc(n)) %&gt;% head(10) %&gt;% ggplot(aes(x = reorder(lemma, -n), y = n)) + geom_bar(stat = &quot;identity&quot;) + labs(x = &quot;&quot;, y = &quot;count&quot;) + theme_minimal() 38. Histogram Draw a histogram of word frequency (x-axis is a scalar range representing a frequency ranging from 1 to the largest frequency of a given word in the entire corpus, and the y-axis is the count of unique words that fall into the count of the x value). alice %&gt;% count(lemma) %&gt;% ggplot(aes(n)) + geom_histogram() + labs(x = &quot;frequency (count)&quot;, y = &quot;number of words&quot;) + theme_minimal() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 39. Zipf’s law Plot a log-log graph with the x-axis being rank order and the y-axis being frequency. alice %&gt;% count(lemma) %&gt;% mutate(rank = dense_rank(desc(n))) %&gt;% ggplot(aes(x = log(rank), y = log(n))) + geom_point() + theme_minimal() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
